import cx_Oracle 
import EdelweissAPIConnect
import os
import json
import time
from configs import *
from datetime import datetime
from datetime import timedelta
from get_kotak_token import *
from get_edel_token import *
from telegram import *

edeltoken=""
ott=""
sesstoken=""

def read_tokens(broker):
    if broker == "kotak":
        token_file="kotak_tokens.txt"
    else:
        token_file="edel_tokens.txt"

    if broker == "kotak":
        file1 = open(FILE_LOC+token_file, "r")
        Lines = file1.readlines()
        ott=Lines[0].replace("\n",'')
        sesstoken=Lines[1]
    else:
        file1 = open(FILE_LOC+token_file, "r")
        Lines = file1.readlines()
        edeltoken=Lines[0].replace("\n",'')
       
def get_tokens(broker):
    if broker == "kotak":
        token_file="kotak_tokens.txt"
    else:
        token_file="edel_tokens.txt"

    try:
        filetime = datetime.fromtimestamp(os.path.getctime(FILE_LOC+token_file))
        print(broker+' Token File Available ...')
        if filetime.date() == today:
            read_tokens(broker)
        else:
            if broker == "kotak":
                print('Generating '+broker+' Tokens...')
                generate_kotak_token()
                read_tokens(broker)
            else:
                print('Generating '+broker+' Tokens...')
                generate_edel_token()   
                read_tokens(broker)          
    except OSError:
        if broker == "kotak":
            print('Generating '+broker+' Tokens...')
            generate_kotak_token()
            read_tokens(broker)
        else:
            print('Generating '+broker+' Tokens...')
            generate_edel_token()
            read_tokens(broker)

def get_ltp (symbol):
    for row in cursor_kotak.execute("SELECT distinct p.instrumenttoken FROM kotak_scripts p, my_strategies a WHERE p.optiontype = 'XX' AND p.instrumentname =a.symbol(+) AND p.expiry IN ( SELECT MIN(expiry) FROM kotak_scripts WHERE optiontype = 'XX' AND instrumentname = p.instrumentname) and p.instrumentname='"+symbol+"'"):
        try:
            ltp_url="https://ctradeapi.kotaksecurities.com/apim/quotes/v1.0/ltp/instruments/"+row[0]
            resp = req.get(url = ltp_url, headers = header_ltp_kotak)    
            resp = json.loads(resp.text)
            ltp=resp['success'][0].get("lastPrice")
            return ltp       
        except Exception as e :
            print('Error LTP Kotak.')
            error = e
            print (error.code , error.message )

def execute_sql (sql):
    try:
        cursor.execute(sql)
        con.commit()
    except cx_Oracle.Error :
        print("SQL :",sql)
        os.system('say ' "Database Error")
        error = e
        print (error.code , error.message )

#CODE MAIN STARTS FROM HERE

#Initialize

today = datetime.now().date()

print("-----------------------------------------------------")
#Oracle Connection
cx_Oracle.init_oracle_client(lib_dir=CLIENT_LOC)
con = cx_Oracle.connect(user="DHAN", password="Welcome12345#", dsn="dhan_high", encoding="UTF-8")
cursor = con.cursor()
cursor_sl = con.cursor()
cursor_kotak = con.cursor()

get_tokens("kotak")
get_tokens("edelweiss")

file1 = open(FILE_LOC+"kotak_tokens.txt", "r")
Lines = file1.readlines()
ott=Lines[0].replace("\n",'')
sesstoken=Lines[1]

header_ltp_kotak = {
    "accept": "application/json",
	"consumerKey": "Z3l254sO82sHdPjpm80Ahbkmru0a",
	"sessionToken": sesstoken,
    "Authorization": "Bearer d0337058-675c-352f-ab63-247ae9e61b9a"
}

file1 = open(FILE_LOC+"edel_tokens.txt", "r")
Lines = file1.readlines()
edeltoken=Lines[0].replace("\n",'')
print("Edeltoken",edeltoken)

if [ edeltoken !="" ]:
    edel=EdelweissAPIConnect.EdelweissAPIConnect("Mygj2rZICb-eOw","UTc!829BWjDp9%JP",edeltoken,True)
else:
    print("ERROR : edeltoken issue")
    exit(1)
    

sql="UPDATE MY_STRATEGIES set LAST_LTP=LTP" 
cursor.execute(sql) 
con.commit()

start=1
end=0
pos_count=0

while start == 1 and end == 0:
    resp=edel.NetPosition()
    resp=json.loads(resp)["eq"]["data"]["pos"]
    if pos_count == 0:
        pos_count=len(resp)
        send_message("EDELWEISS STARTED...", '542739135')
        send_message("Positions Retrived =>"+str(pos_count), '542739135')

    for i in range(len(resp)):
        if resp[i].get("asTyp") != "EQUITY":
            sql="MERGE INTO positions p USING (SELECT '"+str(resp[i].get("sym"))+"' securityId from dual ) s ON ( p.securityId = s.securityId ) WHEN MATCHED THEN UPDATE SET p.DHANCLIENTID = '45009940',PRODUCTTYPE='"+str(resp[i].get("asTyp"))+"',BUYAVG="+str(resp[i].get("avgByPrc"))+",SELLAVG="+str(resp[i].get("avgSlPrc"))+",LTP="+str(resp[i].get("ltp"))+",NETQTY="+str(resp[i].get("ntQty"))+",REALIZEDPROFIT="+str(resp[i].get("rlzPL"))+",UNREALIZEDPROFIT="+str(resp[i].get("urlzPL"))+",DRVEXPIRYDATE='"+str(resp[i].get("dpExpDt")).replace("'"," ")+"',DRVSTRIKEPRICE="+str(resp[i].get("stkPrc"))+",DP_NAME='"+str(resp[i].get("dpName"))+"',DRVOPTIONTYPE='"+str(resp[i].get("opTyp"))+"',TRADINGSYMBOL='"+str(resp[i].get("trdSym"))+"' WHEN NOT MATCHED THEN insert (DHANCLIENTID,TRADINGSYMBOL,PRODUCTTYPE,BUYAVG,DRVEXPIRYDATE,NETQTY,SELLAVG,DRVSTRIKEPRICE,DRVOPTIONTYPE,SECURITYID,REALIZEDPROFIT,UNREALIZEDPROFIT,LTP,DP_NAME) values('45009940','"+str(resp[i].get("trdSym"))+"','"+str(resp[i].get("asTyp"))+"',"+str(resp[i].get("avgByPrc"))+",'"+str(resp[i].get("dpExpDt")).replace("'"," ")+"',"+str(resp[i].get("ntQty"))+","+str(resp[i].get("avgSlPrc"))+","+str(resp[i].get("stkPrc"))+",'"+str(resp[i].get("opTyp"))+"','"+str(resp[i].get("sym"))+"','"+str(resp[i].get("rlzPL"))+"','"+str(resp[i].get("urlzPL"))+"','"+str(resp[i].get("ltp"))+"','"+str(resp[i].get("dpName"))+"')"
            execute_sql(sql)
            sql="update my_groups set LTP="+str(resp[i].get("ltp"))+",DP_NAME='"+str(resp[i].get("dpName"))+"' where securityId='"+str(resp[i].get("sym"))+"' and NETQTY<>0"
            execute_sql(sql) 
    con.commit()
    print("Positions Ok")

    for row in cursor.execute("SELECT a.group_name, 'TEST' securityid, ( SELECT SUM(nvl(unrealizedprofit,0)) FROM positions WHERE group_name = a.group_name ) unrealizedprofit, ( SELECT SUM(realizedprofit) FROM ( SELECT nvl(SUM(realizedprofit), 0) realizedprofit FROM positions WHERE group_name = a.group_name  UNION SELECT nvl(SUM(realizedprofit),0) FROM ( SELECT nvl(SUM(realizedprofit), 0) realizedprofit FROM positions_archive  WHERE group_name = a.group_name))) realizedprofit, a.symbol FROM ( SELECT DISTINCT group_name,dp_name symbol FROM positions) a"):
        try:
            try:
                time.sleep(1)
                ltp=get_ltp(row[4])
            except:
                print("Error Fetching LTP..")
                ltp=0
            sql="MERGE INTO MY_STRATEGIES p USING (SELECT  '"+row[0]+"' group_name from dual ) a ON ( a.group_name = p.STRATEGY_NAME ) WHEN MATCHED THEN UPDATE SET SECURITYID='"+row[1]+"',UNREALISED_PNL="+str(row[2])+", REALISED_PNL="+str(row[3])+",SYMBOL='"+row[4]+"',LTP=round("+ltp+") WHEN NOT MATCHED THEN insert (STRATEGY_NAME,UNREALISED_PNL,REALISED_PNL,SECURITYID,SYMBOL,LTP) values ('"+row[0]+"',"+str(row[2])+","+str(row[3])+",'"+str(row[1])+"','"+str(row[4])+"',round("+ltp+"))"
            #print(sql)
            cursor_sl.execute(sql)    
        except cx_Oracle.Error :
            print('Error LTP Group...')
            error = e
            print (error.code , error.message )
    

    con.commit()
    print("Groups Ok")

    for row in cursor.execute("select distinct SYMBOL,SYMBOL||' : '|| ltp||' '||case when last_ltp < ltp then 'UP' else 'DOWN' end ||' by '||round(abs((last_ltp-ltp) /last_ltp *100),2) ||' %' msg from my_strategies  where round(abs((last_ltp-ltp) /last_ltp *100)) > 0.5"):
        sql="UPDATE MY_STRATEGIES set LAST_LTP=LTP where symbol='"+row[0]+"'"
        cursor_sl.execute(sql) 
        send_message(row[1], '542739135')
    con.commit()

    #end=1
    time.sleep(10)
    now = datetime.now()
    todayclose = now.replace(hour=15, minute=30, second=0, microsecond=0)
    if now >  todayclose:
        end=1

#Cleanup
sql="insert into positions_archive  select * from positions where REALIZEDPROFIT<>0" 
execute_sql(sql)
sql="update positions set CLOSED_DATE=sysdate where SECURITYID in ( select EXCHANGETOKEN from edel_scripts where trunc(EXPIRY)<=trunc(sysdate)) and closed_date is null" 
execute_sql(sql)
sql="insert into positions_archive select * from positions where SECURITYID in ( select EXCHANGETOKEN from edel_scripts where trunc(EXPIRY)<=trunc(sysdate))" 
execute_sql(sql)
sql="insert into  edel_orders_archive select * from edel_orders" 
execute_sql(sql)
sql="update positions_archive set REALIZEDPROFIT=UNREALIZEDPROFIT where REALIZEDPROFIT=0" 
execute_sql(sql)
sql="delete from positions where SECURITYID in ( select EXCHANGETOKEN from edel_scripts where trunc(EXPIRY)<=trunc(sysdate))" 
execute_sql(sql)
sql="delete from edel_orders" 
execute_sql(sql)
sql="delete from positions where REALIZEDPROFIT<>0" 
execute_sql(sql)
sql="DELETE FROM MY_STRATEGIES where STRATEGY_NAME not in ( select group_name from positions)" 
execute_sql(sql)
con.commit()

